#!/usr/bin/env python3
# build_pydoc_subset.py
import argparse, os, sys, importlib, pkgutil, pydoc, html

def walk(module_name: str):
    """Yield module and all submodules if it's a package."""
    mod = importlib.import_module(module_name)
    yield module_name
    if hasattr(mod, "__path__"):
        for m in pkgutil.walk_packages(mod.__path__, mod.__name__ + "."):
            yield m.name

def write_index(outdir: str, names: list[str]):
    items = []
    for n in names:
        try:
            m = importlib.import_module(n)
            summary = (m.__doc__ or "").strip().splitlines()[0] if m.__doc__ else ""
        except Exception:
            summary = ""
        items.append((n, summary))
    items.sort()
    with open(os.path.join(outdir, "index.html"), "w", encoding="utf-8") as f:
        f.write("<!doctype html><meta charset='utf-8'>")
        f.write("<title>API docs</title><h1>API documentation (subset)</h1>")
        f.write("<p>Generated by <code>pydoc</code>.</p><ul>")
        for n, s in items:
            f.write(f"<li><a href='{html.escape(n)}.html'>{html.escape(n)}</a>")
            if s: f.write(f" â€” {html.escape(s)}")
            f.write("</li>")
        f.write("</ul>")

def main():
    ap = argparse.ArgumentParser(description="Write pydoc HTML for specific modules only.")
    ap.add_argument("modules", nargs="+", help="Module or package names (e.g. core tests or yourpkg.core)")
    ap.add_argument("-o", "--outdir", default="docs", help="Output directory (default: docs)")
    args = ap.parse_args()

    # Make project importable
    sys.path.insert(0, os.getcwd())
    os.makedirs(args.outdir, exist_ok=True)

    # Collect targets: specified modules + their submodules (no others)
    targets = []
    for name in args.modules:
        try:
            for n in walk(name):
                targets.append(n)
        except Exception as e:
            print(f"Skipping {name}: {e}")

    # De-dup while preserving order
    seen, ordered = set(), []
    for n in targets:
        if n not in seen:
            seen.add(n); ordered.append(n)

    # Write HTML
    cwd = os.getcwd()
    try:
        os.chdir(args.outdir)
        for n in ordered:
            try:
                pydoc.writedoc(n)      # writes <module>.html here
                print(f"Wrote {n}.html")
            except Exception as e:
                print(f"Skipping {n}: {e}")
        write_index(".", ordered)
        print(f"\nDone. Open {os.path.abspath('index.html')}")
    finally:
        os.chdir(cwd)

if __name__ == "__main__":
    main()
